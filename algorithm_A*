import heapq
class Node:
    def __init__(self, parent=None, position=None):
        self.parent = parent
        self.position = position

        self.g = 0  
        self.h = 0 
        self.f = 0 
    def __eq__(self, other):
        return self.position == other.position
    def __lt__(self, other):
        return self.f < other.f
    def __repr__(self):
        return f"Node({self.position})"

    def __hash__(self):
        return hash(self.position)

def astar(grid, start, end):
    start_node = Node(None, start)
    end_node = Node(None, end)
    open_list = []
    closed_list = set()
    heapq.heappush(open_list, start_node)
    while open_list:
        current_node = heapq.heappop(open_list)
        closed_list.add(current_node)
        if current_node == end_node:
            path = []
            current = current_node
            while current is not None:
                path.append(current.position)
                current = current.parent
            return path[::-1]  
        children = []
        for new_position in [(0, -1), (0, 1), (-1, 0), (1, 0)]:  
            node_position = (current_node.position[0] + new_position[0],
                             current_node.position[1] + new_position[1])
            if not (0 <= node_position[0] < len(grid) and 0 <= node_position[1] < len(grid[0])):
                continue
            if grid[node_position[0]][node_position[1]] != 0:
                continue
            new_node = Node(current_node, node_position)
            children.append(new_node)
        for child in children:
            if child in closed_list:
                continue
            child.g = current_node.g + 1
            child.h = abs(child.position[0] - end_node.position[0]) + abs(child.position[1] - end_node.position[1])
            child.f = child.g + child.h
            if any(open_node for open_node in open_list if child == open_node and child.g >= open_node.g):
                continue
            heapq.heappush(open_list, child)    
    return None 


if __name__ == '__main__':
    grid = [
        [0, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 1, 1, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0]
    ]

    start = (0, 0)
    end = (7, 6)

    path = astar(grid, start, end)
    if path:
        print("Найденный путь:", path)
    else:
        print("Путь не найден.")
